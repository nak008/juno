install.packages("quantmod", "forecast", "tseries")
library(quantmod)
install.packages("quantmod", "forecast", "tseries")
install.packages("quantmod")
install.packages("tseries")
library(quantmod)
library(forecast)
library(tseries)
install.packages("forecast")
library(forecast)
library(tseries)
library(quantmod)
data <- list(N=length(X), Y=Y)
plot(Y~X, type="l")
X <- 1961:1990
Y <- c(4.71, 7.70, 7.97, 8.35, 5.70,
7.33, 3.10, 4.98, 3.75, 3.35,
1.84, 3.28, 2.77, 2.72, 2.54,
3.23, 2.45, 1.90, 2.56, 2.12,
1.78, 3.18, 2.64, 1.86, 1.69,
0.81, 1.02, 1.40, 1.31, 1.57)
data <- list(N=length(X), Y=Y)
plot(Y~X, type="l")
library(rstan)
install.packages("rstan")
library(rstan)
rstan_options(auto_write=TRUE)
options(mc.cores = parallel::detectCores())
#ローカルレベルモデル
localLevelModel <- 'data{
int<lower = 0> N;
real<lower= 0> Y[N];
}
parameters{
real alpha[N];
real<lower = 0>s_Y;
real<lower = 0>s_a;
}
model {
for(i in 1:N)
Y[i] ~ normal(alpha[i], s_Y);
for(i in 2:N)
alpha[i] ~ normal(alpha[i-1], s_a);
}
'
#MCMC
stanlocal <-stan_model(model_code = localLevelModel)
library(rstan)
rstan_options(auto_write=TRUE)
options(mc.cores = parallel::detectCores())
#ローカルレベルモデル
localLevelModel <- 'data{
int<lower = 0> N;
real<lower= 0> Y[N];
}
parameters{
real alpha[N];
real<lower = 0>s_Y;
real<lower = 0>s_a;
}
model {
for(i in 1:N)
Y[i] ~ normal(alpha[i], s_Y);
for(i in 2:N)
alpha[i] ~ normal(alpha[i-1], s_a);
}
'
#MCMC
stanlocal <-stan_model(model_code = localLevelModel)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
#MCMC
stanlocal <-stan_model(model_code = localLevelModel)
library(rstan)
rstan_options(auto_write=TRUE)
options(mc.cores = parallel::detectCores())
#ローカルレベルモデル
localLevelModel <- 'data{
int<lower = 0> N;
real<lower= 0> Y[N];
}
parameters{
real alpha[N];
real<lower = 0>s_Y;
real<lower = 0>s_a;
}
model {
for(i in 1:N)
Y[i] ~ normal(alpha[i], s_Y);
for(i in 2:N)
alpha[i] ~ normal(alpha[i-1], s_a);
}
'
#MCMC
stanlocal <-stan_model(model_code = localLevelModel)
p<-1/2
n<-10
120*p^3*(1-p)^7
120*p^x*(1-p)^(n-x)
x<-3
120*p^x*(1-p)^(n-x)
x<-4
dbinom(x=x, size=n, prob=p)
p<-1/2
n<-10
x<-3
dbinom(x=x, size=n, prob=p)
x<-0:10
x
#これで上と同じ
dbinom(x=x, size=n, prob=p)
#これで上と同じ
plot(dbinom(x=x, size=n, prob=p))
p<-1/6
#これで上と同じ
plot(dbinom(x=x, size=n, prob=p))
p<-4/6
#これで上と同じ
plot(dbinom(x=x, size=n, prob=p))
p<-9/10
#これで上と同じ
plot(dbinom(x=x, size=n, prob=p))
rbinom(n=5, size=n, prob=p)
p<-1/2
n<-10
rbinom(n=5, size=n, prob=p)
#これで上と同じ
#d binom(二項分布)
plot(dbinom(x=x, size=n, prob=p))
install.packages("ranger",dependencies = TRUE)
#ランダムフォレストを実行するためのパッケージ
library(ranger)
#データの作成
dat <- read.csv("./data/split_demo.csv",fileEncoding="utf-8")
dat$label <-as.factor(dat$label)
#データの作成
dat <- read.csv("./data/split_demo.csv",fileEncoding="utf-8")
setwd("C:/Users/taror/iCloudDrive/sugakubunka/集団授業/zokushokyu/2021-04/lecture15")
#データの作成
dat <- read.csv("./data/split_demo.csv",fileEncoding="utf-8")
dat$label <-as.factor(dat$label)
head(x=dat, n=5)
str(dat)
#ランダムフォレストの実行
result <- ranger(formula=label~x+y,
data=dat,
mtry=1,
max.depth=2,
min.node.size=20,
write.forest=TRUE,
importance = "impurity",
classification = TRUE)
packageVersion("Rcpp")
remove.packages("Rcpp")
install.packages("ranger",dependencies = TRUE)
#ランダムフォレストを実行するためのパッケージ
library(ranger)
#データの作成
dat <- read.csv("./data/split_demo.csv",fileEncoding="utf-8")
install.packages("ranger", dependencies = TRUE)
#ランダムフォレストを実行するためのパッケージ
library(ranger)
packageVersion("Rcpp")
#ランダムフォレストの実行
result <- ranger(formula=label~x+y,
data=dat,
mtry=1,
max.depth=2,
min.node.size=20,
write.forest=TRUE,
importance = "impurity",
classification = TRUE)
result
