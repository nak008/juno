x <- (1:10000)/100
y <- 2.0 + 3.0*x + rnorm(10000, mean=0, sd = 1.5)
d <-data.frame(x=x, y=y)
plot(d$x,d$y)
y <- 2.0 + 3.0*x + rnorm(10000, mean=0, sd = 15)
d <-data.frame(x=x, y=y)
plot(d$x,d$y)
y <- 2.0 + 10.0*x + rnorm(10000, mean=0, sd = 10)
d <-data.frame(x=x, y=y)
plot(d$x,d$y)
y <- 2.0 + 0.1*x + rnorm(10000, mean=0, sd = 10)
d <-data.frame(x=x, y=y)
plot(d$x,d$y)
y <- 2.0 + 5.0*x + rnorm(10000, mean=0, sd = 10)
d <-data.frame(x=x, y=y)
plot(d$x,d$y)
y <- 2.0 + 5.0*x + rnorm(10000, mean=0, sd = 100)
d <-data.frame(x=x, y=y)
plot(d$x,d$y)
x <- (1:1000)/10
y <- 2.0 + 5.0*x + rnorm(1000, mean=0, sd = 100)
d <-data.frame(x=x, y=y)
plot(d$x,d$y)
sample(20)
sample(1000,20)
index <- sample(1000,20)
data <- d[index,]
data
plot(data$x, data$y)
lm(y~x, data=data)
index <- sample(1000,20)
data <- d[index,]
plot(data$x, data$y)
lm(y~x, data=data)
res <- lm(y~x, data=data)
res$coefficients
res$coefficients[2]
b_hat <- c()
for(i in 1:10000){
index <- sample(1000,20)
data <- d[index,]
res <- lm(y~x, data=data)
b_hat[i] <- res$coefficients[2]
}
b_hat
hist(b_hat)
index <- sample(1000,20)
data <- d[index,]
data
plot(data$x, data$y)
res <- lm(y~x, data=data)
res$coefficients[2]
index <- sample(1000,20)
data <- d[index,]
plot(data$x, data$y)
res <- lm(y~x, data=data)
res$coefficients[2]
index <- sample(1000,20)
data <- d[index,]
plot(data$x, data$y)
res <- lm(y~x, data=data)
res$coefficients[2]
index <- sample(1000,20)
data <- d[index,]
plot(data$x, data$y)
res <- lm(y~x, data=data)
res$coefficients[2]
index <- sample(1000,20)
data <- d[index,]
plot(data$x, data$y)
res <- lm(y~x, data=data)
res$coefficients[2]
index <- sample(1000,20)
data <- d[index,]
plot(data$x, data$y)
res <- lm(y~x, data=data)
res$coefficients[2]
index <- sample(1000,20)
data <- d[index,]
plot(data$x, data$y)
res <- lm(y~x, data=data)
res$coefficients[2]
index <- sample(1000,20)
data <- d[index,]
plot(data$x, data$y)
res <- lm(y~x, data=data)
res$coefficients[2]
index <- sample(1000,20)
data <- d[index,]
plot(data$x, data$y)
res <- lm(y~x, data=data)
res$coefficients[2]
index <- sample(1000,20)
data <- d[index,]
plot(data$x, data$y)
res <- lm(y~x, data=data)
res$coefficients[2]
index <- sample(1000,20)
data <- d[index,]
plot(data$x, data$y)
res <- lm(y~x, data=data)
res$coefficients[2]
index <- sample(1000,20)
data <- d[index,]
plot(data$x, data$y)
res <- lm(y~x, data=data)
res$coefficients[2]
index <- sample(1000,20)
data <- d[index,]
plot(data$x, data$y)
res <- lm(y~x, data=data)
res$coefficients[2]
index <- sample(1000,20)
data <- d[index,]
plot(data$x, data$y)
res <- lm(y~x, data=data)
res$coefficients[2]
index <- sample(1000,20)
data <- d[index,]
plot(data$x, data$y)
res <- lm(y~x, data=data)
res$coefficients[2]
index <- sample(1000,20)
data <- d[index,]
plot(data$x, data$y)
res <- lm(y~x, data=data)
res$coefficients[2]
index <- sample(1000,20)
data <- d[index,]
plot(data$x, data$y)
res <- lm(y~x, data=data)
res$coefficients[2]
#以上を
b_hat <- c()
index <- sample(1000,20)
data <- d[index,]
plot(data$x, data$y)
res <- lm(y~x, data=data)
res$coefficients[2]
index <- sample(1000,20)
data <- d[index,]
plot(data$x, data$y)
res <- lm(y~x, data=data)
res$coefficients[2]
index <- sample(1000,20)
data <- d[index,]
plot(data$x, data$y)
res <- lm(y~x, data=data)
res$coefficients[2]
index <- sample(1000,20)
data <- d[index,]
plot(data$x, data$y)
res <- lm(y~x, data=data)
res$coefficients[2]
index <- sample(1000,20)
data <- d[index,]
plot(data$x, data$y)
res <- lm(y~x, data=data)
res$coefficients[2]
index <- sample(1000,20)
data <- d[index,]
plot(data$x, data$y)
res <- lm(y~x, data=data)
res$coefficients[2]
index <- sample(1000,20)
data <- d[index,]
plot(data$x, data$y)
res <- lm(y~x, data=data)
res$coefficients[2]
index <- sample(1000,20)
data <- d[index,]
plot(data$x, data$y)
res <- lm(y~x, data=data)
res$coefficients[2]
index <- sample(1000,20)
data <- d[index,]
plot(data$x, data$y)
res <- lm(y~x, data=data)
res$coefficients[2]
index <- sample(1000,20)
data <- d[index,]
plot(data$x, data$y)
res <- lm(y~x, data=data)
res$coefficients[2]
index <- sample(1000,20)
data <- d[index,]
plot(data$x, data$y)
res <- lm(y~x, data=data)
res$coefficients[2]
index <- sample(1000,20)
data <- d[index,]
plot(data$x, data$y)
res <- lm(y~x, data=data)
res$coefficients[2]
index <- sample(1000,20)
data <- d[index,]
plot(data$x, data$y)
res <- lm(y~x, data=data)
res$coefficients[2]
index <- sample(1000,20)
data <- d[index,]
plot(data$x, data$y)
res <- lm(y~x, data=data)
res$coefficients[2]
hist(b_hat)
#以上をくりかえす
b_hat <- c()
for(i in 1:10000){
index <- sample(1000,20)
data <- d[index,]
res <- lm(y~x, data=data)
b_hat[i] <- res$coefficients[2]
}
hist(b_hat)
res$residuals
x <- 10
x+5
x
x
x+5
x<-x+5
x
x+5
x <- 10
x+5
x+5
x<-x+5
x
#lecture10を作業ディレクトリにする
dat <- read.csv("./data/dairy_products.csv",
fileEncoding = "utf-8",
row.names="country")
setwd("C:/Users/taror/iCloudDrive/sugakubunka/集団授業/zokushokyu/2021-04/lecture10")
#lecture10を作業ディレクトリにする
dat <- read.csv("./data/dairy_products.csv",
fileEncoding = "utf-8",
row.names="country")
#lecture10を作業ディレクトリにする
dat <- read.csv("./data/dairy_products.csv",
fileEncoding = "utf-8",
row.names="country")
#lecture10を作業ディレクトリにする
dat <- read.csv("./data/dairy_products2.csv",
fileEncoding = "utf-8",
row.names="country")
head(dat)
str(dat)
summary(dat)
#標準化する
#しないと、milkが似ているかどうかでクラスタリングされそう
dat_scaled <- scale(dat)
#centers : クラスタ数(自分で決める)
result <- kmeans(x=dat_scaled, centers=3, iter.max = 100)
result
#centers : クラスタ数(自分で決める)
result <- kmeans(x=dat_scaled, centers=3, iter.max = 100)
result
#centers : クラスタ数(自分で決める)
result <- kmeans(x=dat_scaled, centers=3, iter.max = 100)
head(dat)
str(dat)
summary(dat)#各列でスケールが異なる
dat_scaled
result$cluster
result$centers
plot(dat)
plot(dat, col=result$cluster)
library(MASS)
diag(c(1,1))
diag(c(1,2))
#多変量正規分布に従う乱数
#mu 平均ベクトル
#Sigma 分散共分散行列
mvrnorm(n=100, mu=c(-2, -2) ,Sigma=diag(c(1,1)))
cluster1 <-mvrnorm(n=100, mu=c(-2, -2) ,Sigma=diag(c(1,1)))
cluster2 <-mvrnorm(n=100, mu=c(2, 2) ,Sigma=diag(c(1,1)))
X <- rbind(cluster1, cluster2)
X
dat <- data.frame(x1=X[,1], x2=X[,2])
head(dat)
cluster1 <-mvrnorm(n=100, mu=c(6, 10) ,Sigma=diag(c(2,2)))
cluster2 <-mvrnorm(n=100, mu=c(13, 10) ,Sigma=diag(c(2,2)))
cluster3 <-mvrnorm(n=100, mu=c(10, -10) ,Sigma=diag(c(2,2)))
cluster4 <-mvrnorm(n=100, mu=c(-10, -10) ,Sigma=diag(c(2,2)))
cluster5 <-mvrnorm(n=100, mu=c(-10, 10) ,Sigma=diag(c(1,1)))
X <- rbind(cluster1, cluster2, cluster3, cluster4, cluster5)
dat <- data.frame(x1=X[,1], x2=X[,2])
head(dat)
plot(dat)
result <- kmeans(dat, centers=5, iter.max = 100)
plot(dat, col=result$cluster)
result <- kmeans(dat, centers=5, iter.max = 100)
plot(dat, col=result$cluster)
result <- kmeans(dat, centers=5, iter.max = 100)
plot(dat, col=result$cluster)
result <- kmeans(dat, centers=5, iter.max = 100)
plot(dat, col=result$cluster)
result <- kmeans(dat, centers=5, iter.max = 100)
plot(dat, col=result$cluster)
result <- kmeans(dat, centers=5, iter.max = 100)
plot(dat, col=result$cluster)
result <- kmeans(dat, centers=5, iter.max = 100)
plot(dat, col=result$cluster)
result <- kmeans(dat, centers=5, iter.max = 100)
plot(dat, col=result$cluster)
cluster1 <-mvrnorm(n=200, mu=c(-2, -2) ,Sigma=diag(c(2,2)))
cluster2 <-mvrnorm(n=10, mu=c(2, 2) ,Sigma=diag(c(2,2)))
cluster3 <-mvrnorm(n=20, mu=c(2, -2) ,Sigma=diag(c(2,2)))
X <- rbind(cluster1, cluster2, cluster3)
dat <- data.frame(x1=X[,1], x2=X[,2])
plot(dat)
result <- kmeans(dat, centers=3, iter.max = 100)
plot(dat, col=result$cluster)
cluster1 <-mvrnorm(n=200, mu=c(-2, -2) ,Sigma=diag(c(1,1)))
cluster2 <-mvrnorm(n=10, mu=c(2, 2) ,Sigma=diag(c(1,1)))
cluster3 <-mvrnorm(n=20, mu=c(2, -2) ,Sigma=diag(c(1,1)))
X <- rbind(cluster1, cluster2, cluster3)
dat <- data.frame(x1=X[,1], x2=X[,2])
plot(dat)
result <- kmeans(dat, centers=3, iter.max = 100)
plot(dat, col=result$cluster)
#確率的回帰代入
imp <- mice(data, method="norm.nob", seed=3,
m=1, print=FALSE)
xyplot(imp, Ozone~Solar.R)
#回帰代入
library(mice)
#確率的回帰代入
imp <- mice(data, method="norm.nob", seed=3,
m=1, print=FALSE)
xyplot(imp, Ozone~Solar.R)
data <- airquality
head(data)
summary(airquality)
str(airquality)
fit <- lm(Ozone ~ Wind, data = airquality, na.action = na.omit)
summary(fit)
#確率的回帰代入
imp <- mice(data, method="norm.nob", seed=3,
m=1, print=FALSE)
xyplot(imp, Ozone~Solar.R)
imp
imp$data
imp$imp
?imp
?mice
complete(imp)
dat
head(dat)
head(imp$data)
head(complete(imp))
cor(complete(imp))
cor(complete(imp)$Ozone,complete(imp)$Solar.R)
#確率的回帰代入
imp <- mice(data, method="norm.nob", seed=1,
m=1, print=FALSE)
xyplot(imp, Ozone~Solar.R)
#確率的回帰代入
imp <- mice(data, method="norm.nob", seed=2,
m=1, print=FALSE)
xyplot(imp, Ozone~Solar.R)
#確率的回帰代入
imp <- mice(data, method="norm.nob", seed=1,
m=1, print=FALSE)
cor(complete(imp)$Ozone,complete(imp)$Solar.R)
#確率的回帰代入
imp <- mice(data, method="norm.nob", seed=2,
m=1, print=FALSE)
cor(complete(imp)$Ozone,complete(imp)$Solar.R)
result_cors <-c()
for(i in 1:1000){
imp <- mice(data, method="norm.nob", seed=i,
m=1, print=FALSE)
result_cors<-cor(complete(imp)$Ozone,complete(imp)$Solar.R)
}
hist(result_cors)
result_cors
for(i in 1:1000){
imp <- mice(data, method="norm.nob", seed=i,
m=1, print=FALSE)
result_cors[i]<-cor(complete(imp)$Ozone,complete(imp)$Solar.R)
}
hist(result_cors)
mean(result_cors)
median(result_cors)
mean(result_cors)
median(result_cors)
max(result_cors)
min(result_cors)
with(imp)
#確率的回帰代入
imp <- mice(data, method="norm.nob", seed=2,
m=1, print=FALSE)
with(imp)
imp <- mice(airquality, seed=1, m=20)
imp <- mice(airquality, seed=1, m=20, print=FALSE)
fit <- with(imp, lm(Ozone~Wind+Temp+Solar.R))
summary(pool(fit))
#第3段階
summary(pool(fit))
fit <- lm(Ozone~Wind+Temp+Solar.R)
coef(fit)
coef(summary(fit))
fit <- lm(Ozone~Wind+Temp+Solar.R, data = airquality)
coef(summary(fit))
xyplot(imp, Ozone~Solar.R)
#多重代入をとりあえずやってみる
#第1段階
imp <- mice(airquality, seed=1, m=5, print=FALSE)
#第2段階
fit <- with(imp, lm(Ozone~Wind+Temp+Solar.R))
#第3段階
summary(pool(fit))
fit <- lm(Ozone~Wind+Temp+Solar.R, data = airquality)
coef(summary(fit))
xyplot(imp, Ozone~Solar.R)
setwd("C:/Users/taror/iCloudDrive/sugakubunka/集団授業/zokushokyu/2021-04/lecture11")
#lecture11を作業ディレクトリにする
dat <- read.csv("./data/dairy_products2.csv",
fileEncoding = "utf-8",
row.names="country")
#lecture11を作業ディレクトリにする
dat <- read.csv("./data/dairy_products.csv",
fileEncoding = "utf-8",
row.names="country")
setwd("C:/Users/taror/iCloudDrive/sugakubunka/集団授業/zokushokyu/2021-04/lecture10")
#lecture11を作業ディレクトリにする
dat <- read.csv("./data/dairy_products2.csv",
fileEncoding = "utf-8",
row.names="country")
head(dat)
str(dat)
summary(dat)#各列でスケールが異なる
library(cluster)
library(dendextend)
#lecture11を作業ディレクトリにする
dat <- read.csv("./data/dairy_products.csv",
fileEncoding = "UTF-8-BOM",
row.names="country")
head(dat)
str(dat)
summary(dat)#各列でスケールが異なる
result <- agnes(x=dat_scaled, metrix="euclidian", method="ward")
result <- agnes(x=dat_scaled, metric="euclidian", method="ward")
dend <-as.dendrogram(result)
labels(dend)
labels(dend) <- row.names(dat)
labels(dend)
dend <-as.dendrogram(result)
labels(dend)
labels(dend) <- row.names(dat)
labels(dend)
plot(dend, main="乳製品の消費量")
dend <- color_branches(dend, k=4)
plot(dent)
plot(dend)
plot(dend, main="乳製品の消費量")
summary(dat)
#lecture11を作業ディレクトリにする
dat <- read.csv("./data/dairy_products.csv",
fileEncoding = "UTF-8-BOM",
row.names="country")
head(dat)
str(dat)
summary(dat)
#lecture11を作業ディレクトリにする
dat <- read.csv("./data/dairy_products.csv",
fileEncoding = "UTF-8-BOM",
row.names="country")
head(dat)
str(dat)
summary(dat)
dat_scaled <- sclae(dat)
dat_scaled <- scale(dat)
library(cluster)
library(dendextend)
library(cluster)
library(dendextend)
#クラスター間距離はmethodで指定。基本は"ward"
result <- agnes(x = dat_scaled, metric = "euclidian", method="ward")
dend <- as.dendrogram(result)
labels(dend) <- row.names(dat)
dend <- as.dendrogram(result)
labels(dend) <- row.names(dat)
plot(dend)
clusters <- cutree(dend, k=4)
clusters
clusters == 1
dat[clusters == 1, ]
clusters
dat[clusters == 1, ]
dat[clusters == 2, ]
dat[clusters == 3, ]
dat[clusters == 4, ]
dat[clusters == 5, ]
dat[clusters == 4, ]
dat[clusters == 2, ]
plot(dat, col=clusters)
clusters <- cutree(dend, k=3)
clusters
plot(dat, col=clusters)
#クラスター間距離はmethodで指定。基本は"ward"
result <- agnes(x = dat_scaled, metric = "euclidian", method="single")
dend <- as.dendrogram(result)
labels(dend) <- row.names(dat)
plot(dend)
?agnes
#クラスター間距離はmethodで指定。基本は"ward"
result <- agnes(x = dat_scaled, metric = "euclidian", method="average")
dend <- as.dendrogram(result)
labels(dend) <- row.names(dat)
plot(dend)
